---
- name: Get tls secrets from k8s (requires kubeconfig)
  # to use this playbook,
  # INSTALL THE ANSIBLE-GALAXY KUBERNETES MODULE FOR THE USER THAT WILL RUN THE PLAYBOOK
  # NEXT, ON THE KUBERNETES NODE, INSTALL PIP
  hosts: test_cluster
  gather_facts: false
  tasks:
    - name: Ensure required k8s modules are installed
      ansible.builtin.pip:
        name: kubernetes

    - name: Retrieve the 'tls.crt' value from the 'cert-tls' secret
      kubernetes.core.k8s:
        api_version: v1
        kind: Secret
        name: cert-tls
        namespace: cert-manager
        # kubeconfig: "{{ kubeconfig }}"
      register: secret_result

    - name: Decode the base64-encoded 'tls.crt' value
      ansible.builtin.set_fact:
        decoded_tls_crt: "{{ secret_result.result.data['tls.crt'] | b64decode }}"
      delegate_facts: true

    - name: Decode the base64-encoded 'tls.key' value
      ansible.builtin.set_fact:
        decoded_tls_key: "{{ secret_result.result.data['tls.key'] | b64decode }}"
      delegate_facts: true

- name: Push certs to haproxy
  hosts: haproxy
  gather_facts: true
  tasks:
    - name: Create the certs directory
      ansible.builtin.file:
        path: ~/certs
        state: directory
        mode: '0700'

    - name: Add tls.crt to the certs directory
      become: true
      ansible.builtin.copy:
        content: "{{ hostvars['SRV1']['decoded_tls_crt'] }}"
        dest: /opt/certs/tls.crt
        mode: '0644' # Allow group and others to read
        backup: true

    - name: Add tls.key to the certs directory
      become: true
      ansible.builtin.copy:
        content: "{{ hostvars['SRV1']['decoded_tls_key'] }}"
        dest: /opt/certs/tls.crt.key
        mode: '0644' # Allow group and others to read
        backup: true

    # - name: Display the 'tls.crt' value
    #   ansible.builtin.debug:
    #     var: decoded_tls_crt

    # - name: Display the 'tls.key' value
    #   ansible.builtin.debug:
    #     var: decoded_tls_key
