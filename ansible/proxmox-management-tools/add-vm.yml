---
- name: Required local checks
  hosts: localhost
  gather_facts: true
  roles:
  tasks: 
    - name: Copy the template script to localhost
      ansible.builtin.template:
        src: "templates/proxmoxer.py.j2"
        dest: "/tmp/proxmoxer.py"
        mode: "755"
      vars:
        proxmox_script_user: "{{ hostvars['prox12']['proxmox_user'] }}"
        proxmox_script_password: "{{ hostvars['prox12']['proxmox_password'] }}"
        proxmox_script_url: "{{ hostvars['prox12']['proxmox_url'] }}"


    - name: Ensure the required python packages are installed
      ansible.builtin.pip:
        name: "{{ item }}"
      with_items:
        - requests
        - proxmoxer
    
    - name: Ensure the required apt packages are installed
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - sshpass
      become: true

    - name: Run script on remote host
      ansible.builtin.script: /tmp/proxmoxer.py
      register: result

    - name: Set the output of the script to a variable
      ansible.builtin.set_fact:
        script_output: "{{ result.stdout_lines }}"

    - name: Remove script from remote host
      ansible.builtin.file:
        path: /tmp/proxmoxer.py
        state: absent

- name: Proxmox checks
  hosts: "{{ hostvars['localhost']['script_output'] }}"
  gather_facts: true
  tasks:
    - name: Debug the ansible-role-proxmox output
      ansible.builtin.debug:
        msg: "The selected node for the vm is: {{ ansible_host }}"

    - name: Ping!
      ansible.builtin.ping:

  # - name: Check container uptime
  #   community.general.proxmox:
  #     vmid: 100
  #     node: "{{ hostvars[localhost][script_output] }}"
  #     password: "{{ proxmox_password }}"